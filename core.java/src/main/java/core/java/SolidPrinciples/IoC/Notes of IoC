Implementing Inversion of Control

High-level modules (Controllers), which provide complex logic, should be easily reusable and unaffected by changes in
low-level modules(Service), which provide utility features. To achieve that, you need to introduce an abstraction that
decouples the high-level and low-level modules from each other.

Based on this idea, Robert C. Martin’s definition of the Dependency Inversion Principle consists of two parts:
High-level modules should not depend on low-level modules. Both should depend on abstractions.
Abstractions should not depend on details. Details should depend on abstractions.

An important detail of this definition is, that high-level and low-level modules depend on the abstraction.
The design principle does not just change the direction of the dependency, as you might have expected when you read its name
for the first time. It splits the dependency between the high-level and low-level modules by introducing an abstraction between
them.
So in the end, you get two dependencies:
the high-level module depends on the abstraction, and
the low-level depends on the same abstraction.

There are several methodologies for implementing inversion of control:
-Dependency Injection: The control on how dependencies are acquired by client classes no longer resides in these classes. It resides in the underlying injectors / DI framework(s) instead.
-Observer pattern: The control is transferred from the observers to the subject when it comes to reacting to changes.
-Template method pattern: The control resides in the base class that defines the template method, instead of in the subclasses, implementing the algorithm’s steps.